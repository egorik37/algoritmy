#include <iostream>
#include <string>
using namespace std;

class Node {
public:
    string name;   
    int    grade;  
    Node*  left = nullptr;   // ліве піддерево (оцінки більше)
    Node*  right = nullptr;  // праве піддерево (оцінки менше або рівні)

    Node(const string& name, int grade) {
        this->name  = name;
        this->grade = grade;
    }
};

// Створення дерева пошуку
void insertStudent(Node*& root, const string& name, int grade) {
    if (root == nullptr) {
        root = new Node(name, grade);
        return;
    }
    if (grade > root->grade) {
        insertStudent(root->left, name, grade);   
    } else {
        insertStudent(root->right, name, grade);  
    }
}

// Симетричний обхід 
void inorderPrint(Node* root) {
    if (!root) return;
    inorderPrint(root->left);
    cout << root->name << " " << root->grade << "\n";
    inorderPrint(root->right);
}

Node* findMaxInRightSubtree(Node* root) {
    if (!root) return nullptr;
    Node* cur = root;
    while (cur->left) cur = cur->left; 
    return cur;
}

// Видалення вузла за оцінкою
void deleteByGrade(Node*& root, int grade) {
    if (!root) return;

    if (grade > root->grade) {
        deleteByGrade(root->left, grade);
    } else if (grade < root->grade) {
        deleteByGrade(root->right, grade);
    } else {
        if (!root->left && !root->right) {
            delete root;
            root = nullptr;
        } else if (!root->left) {
            Node* tmp = root->right;
            delete root;
            root = tmp;
        } else if (!root->right) {
            Node* tmp = root->left;
            delete root;
            root = tmp;
        } else {
            Node* repl = findMaxInRightSubtree(root->right);
            root->name  = repl->name;
            root->grade = repl->grade;
            deleteByGrade(root->right, repl->grade);
        }
    }
}

// 3) Студенти з оцінкою нижче порогу
void printStudentsBelow(Node* root, int threshold) {
    if (!root) return;
    printStudentsBelow(root->left, threshold);
    if (root->grade < threshold) {
        cout << root->name << " " << root->grade << "\n";
    }
    printStudentsBelow(root->right, threshold);
}

int main() {
    Node* root = nullptr;

    cout << "Введiть iм'я та оцiнку студента (END 0 — кiнець):\n";
    while (true) {
        string name; int grade;
        if (!(cin >> name >> grade)) break;
        if (name == "END") break;
        insertStudent(root, name, grade);
    }

    cout << "\nСтуденти (симетричний обхiд, спадання оцiнок):\n";
    inorderPrint(root);

    // Додавання
    cout << "\nДодаємо: George 77\n";
    insertStudent(root, "George", 77);
    inorderPrint(root);

    // Видалення
    cout << "\nВидаляємо всi вузли з оцiнкою 95 (двiчi викличемо):\n";
    deleteByGrade(root, 95);
    deleteByGrade(root, 95);
    inorderPrint(root);

    // Студенти з оцiнкою нижче порогу
    int k = 80;
    cout << "\nСтуденти з оцiнкою нижче " << k << ":\n";
    printStudentsBelow(root, k);

    return 0;
}
